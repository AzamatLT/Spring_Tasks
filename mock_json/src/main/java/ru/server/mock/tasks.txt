//-- Задача 1 - получаем запрос отдаем OK 200
// 			1.1	независимо от запроса и метода get post(пример ниже) 		-V
//			1.2	передавать body									-V
//			1.3	читать id в url GET								-V
//			1.4	отправлять нужный header						-V
//			1.5 читать header									-V
//			1.6 парсить xml	POST								-
//			1.7 парсить json	POST							-V
//			1.8 читать параметры получаемые в GET				-V
//			1.9 отправлять xml POST								-
//			1.10 отправлять json POST							-V
//			1.11 отправлять код 400 или 404 GET POST			-
//-- Задача 2 - Нужна задержка между запросом и ответом.
//			2.1 Время статичной задержки указываем в файле .properties/yml					-V
//			2.2 Время статичной задержки указываем в файле configmap.yaml				-
//			2.3 Используем разное время для разных методов		-V
//			2.4 Используем динамические задержки				-V
//-- Задача 3 Настроить мониторинг на Spring
// 			3.1 Настроить мониторинг метрик JVM	заглушки		-V
//			3.2 Настроить мониторинг времени отклика и кол-во обработанных сообщений	-?
//-- Задача 4 - Логирование на Spring
//			4.1 Логирование										-?
//			4.2 Указывать уровни логирования в configmap		-
//-- Задача 5 Docker
//			5.1 Поднять приложение в Docker						-?
//			5.2 Посмотреть на сколько приложение в кубере и микросистемы на работе		-
//-- Задача 6 Дополнительное ППО
// 			6.1 ID из request запросить в БД Oracle и отправить ответ в response (на Spring)		-
//			6.2 ID из request запросить в БД Postgresql и отправить ответ в response (на Spring)	-
//			6.3 ID из request отправить в Kafka (на Spring)			-V
//			6.4 ID из request отправить в RabbitMQ (на Spring)		-
//			6.5 ID из request отправить в Artemis (на Spring)		-
//			6.6 ID из request отправить в БД InfluxDB (на Spring)	-
//			6.7 ID из request отправить в redis (на Spring)			-
//			6.8 ID из request отправить в Prometheus, может реализовано в мониторинге (на Spring)	-
//-- Задача 7 - Без интернета
// 			7.1 Использовать приложение без доступа к интернету (в закрытой среде)		-
//			7.2 Написать "такое же" приложение в закрытой среде без интернета				-
//-- Задача 8 Сертификаты
//			8.1 Подключить сертификаты (https)						-



	// @RestController сообщает, что этот код описывает конечную точку, которая должна быть доступна через Web
	// @GetMapping(“/hello”) и @PostMapping сообщает Spring использовать наш метод hello() для ответа на запросы,
	// которые отправляются по умолчанию на http://localhost:8080/hello адрес
	// его можно изменить установив server.port в качестве системного свойства,
	// используя параметр командной строки для jvm -Dserver.port=8090
	// еще можно организовать, что бы порт передовался командой вызова приложения и брать его из файла// не реализованно
	// или добавив application.properties в /src/main/resources/
	// метод hello() предназначен для приема строкового параметра с именем name, name по задаче 1 не нужен!
	// @RequestParam сообщает Spring ожидать значение name в запросе,
	// но если его там нет, по умолчанию будет использоваться слово “World”.
	// если убрать @RequestParam в POST будет не важно есть body или нет
	// code = HttpStatus.OK сообщает Spring какой статус ответа

	// Самый простой ответ да на корень. любой метод.
	1.1	независимо от запроса и метода get post
	@RequestMapping("/**")
	public String getAny() {

		return ("");
	}

		// GET с id в endpoint
    	@GetMapping("/hello/{id}")
    	public String getBodyId(@PathVariable String id) {
    		myTimer(timer);
    		return String.format("You request GET - %s!", id);
    	}

    	// GET с параметром и header
    	@GetMapping("/hello")
    	public String getBody(@RequestParam(value =  "name", defaultValue = "Ivan") String name,
    						  @RequestHeader(value =  "trace", defaultValue = "111111") String trace,
    						  HttpServletResponse response) {
    		myTimer(timer);
    		response.addHeader("trace", trace);
    		return String.format("You request GET - %s! Trace from header - %s", name, trace);
    	}

    	// POST JSON
    	@PostMapping("/hello/json")
    	public String postBody(@RequestParam(value =  "name", defaultValue = "Ivan") String name,
    						   @RequestHeader(value =  "trace", defaultValue = "111111") String trace,
    						   HttpServletResponse response) {

    		myTimer(timer);
    		return String.format("You request POST - " + name + " ! Timer = %d", timer);
    	}

    		// POST XML
        	@PostMapping(value = "/hello/xml")
        	public String postBodyXML(@RequestParam(value =  "namexml", defaultValue = "Ivan") String namexml) {
        		myTimer(timer);
        		return String.format("You request POST - " + namexml + " ! Timer = %d", timer);
        	}


        	//Таймер для времени отклика
        	private void myTimer(int timer) {
        		try {
        			Thread.sleep(timer);
        		} catch (InterruptedException e) {
        			e.printStackTrace();
        		}
        	}